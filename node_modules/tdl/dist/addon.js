"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadAddon = loadAddon;
const path = __importStar(require("node:path"));
const node_gyp_build_1 = __importDefault(require("node-gyp-build"));
const packageDir = path.join(__dirname, '..');
function loadAddon(libraryFile, ignoreAlreadyLoaded = false) {
    const addon = (0, node_gyp_build_1.default)(packageDir);
    const success = addon.loadTdjson(libraryFile);
    if (!success && !ignoreAlreadyLoaded)
        throw new Error('tdjson is already loaded');
    return {
        tdold: {
            create: addon.tdoCreate,
            send: addon.tdoSend,
            receive: addon.tdoReceive,
            execute: addon.tdoExecute,
            destroy: addon.tdoDestroy
        },
        tdnew: {
            init: addon.tdnInit,
            ref: addon.tdnRef,
            unref: addon.tdnUnref,
            createClientId: addon.tdnCreateClientId,
            send: addon.tdnSend,
            receive: addon.tdnReceive,
            execute: addon.tdnExecute
        },
        setLogMessageCallback: addon.setLogMessageCallback
    };
}
