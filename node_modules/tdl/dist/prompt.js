"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.getName = exports.getPassword = exports.getAuthCode = exports.confirmOnAnotherDevice = exports.getEmailCode = exports.getEmailAddress = exports.getPhoneNumber = void 0;
const readline = __importStar(require("node:readline"));
function prompt(query) {
    return new Promise((resolve, reject) => {
        const rl = readline.createInterface({
            input: process.stdin,
            output: process.stdout
        });
        rl.on('SIGINT', () => {
            rl.close();
            reject(new Error('Cancelled'));
        });
        rl.on('error', reject);
        rl.question(query, answer => {
            rl.close();
            resolve(answer.replace(/[\r\n]*$/, ''));
        });
    });
}
const getPhoneNumber = (retry) => prompt(retry
    ? 'Invalid phone number, please re-enter: '
    : 'Please enter your phone number: ');
exports.getPhoneNumber = getPhoneNumber;
const getEmailAddress = () => prompt('Please enter your email address: ');
exports.getEmailAddress = getEmailAddress;
const getEmailCode = () => prompt('Please enter the email auth code you received: ');
exports.getEmailCode = getEmailCode;
const confirmOnAnotherDevice = (link) => console.log(`Please confirm on another device: ${link}`);
exports.confirmOnAnotherDevice = confirmOnAnotherDevice;
const getAuthCode = (retry) => prompt(retry
    ? 'Wrong auth code, please re-enter: '
    : 'Please enter the auth code you received: ');
exports.getAuthCode = getAuthCode;
const getPassword = (passwordHint, retry) => {
    const hint = passwordHint ? ` (hint: "${passwordHint}")` : '';
    const query = retry
        ? `Wrong password, please re-enter${hint}: `
        : `Please enter your 2FA password${hint}: `;
    return prompt(query);
};
exports.getPassword = getPassword;
const getName = async () => ({
    firstName: await prompt('Please enter your first name: '),
    lastName: await prompt('Please enter your last name (optional): ') || undefined
});
exports.getName = getName;
